/**
 * Stylesheet: Mixins
 * ************************************************************
 *
 *     0 Included Mixins From Dependencies
 *
 *         0.1 Compass CSS3
 *         0.2 Compass Typography
 *         0.3 Compass Utility
 *
 *     1 CSS-Tricks Mixins
 *
 *         1.1 Covering
 *         1.2 Centering
 *         1.3 Striped Gradient
 *
 *     2 More Useful Mixins
 *
 *         2.1 CSS3 gradients
 *         2.2 Input Placeholder
 *         2.3 Intrinsic Ratio
 *
 *     3 Custom Mixins
 *
 *
 * A WORD OF WARNING: It's very easy to overdo it here.
 * Be careful and remember less is more.
 *
 * @link http://sachagreif.com/useful-sass-mixins/
 * @link http://thesassway.com/intermediate/leveraging-sass-mixins-for-cleaner-code
 * @link http://web-design-weekly.com/blog/2013/05/12/handy-sass-mixins/
 */


/**
 * 0 INCLUDED MIXINS FROM DEPENDENCIES
 *
 */

/**
 * 0.1 COMPASS CSS3 MIXINS
 *
 *
 */

/**
 * 0.2 COMPASS TYPOGRAPHY MIXINS
 *
 * @link http://compass-style.org/reference/compass/typography/
 *
 *
 *** Links
 * -------
 * hover-link                                               A link that only has an underline when you hover over it
 * link-colors($normal, $hover, $active, $visited, $focus)  Set all the colors for a link with one mixin call.
 * unstyled-link                                            A link that looks and acts like the text it is contained within.
 *
 *
 *** Lists
 * -------
 * no-bullet                                                              Turn off the bullet for an element of a list
 * no-bullets                                                             Turns off the bullets for an entire list
 * pretty-bullets($bullet-icon, $width, $height, $line-height, $padding)  Make a list(ul/ol) have an image bullet.
 *
 * horizontal-list-container                   Can be mixed into any selector that target a ul or ol that is meant to have a horizontal layout.
 * horizontal-list-item($padding, $direction)  Can be mixed into any li selector that is meant to participate in a horizontal layout.
 * horizontal-list($padding, $direction)       A list(ol,ul) that is layed out such that the elements are floated left and won't wrap.
 *
 * inline-block-list-container               Can be mixed into any selector that target a ul or ol that is meant to have an inline-block layout.
 * inline-block-list-item($padding)          Can be mixed into any li selector that is meant to participate in a horizontal layout.
 * inline-block-list($padding)               A list(ol,ul) that is layed out such that the elements are inline-block and won't wrap.
 *
 * inline-list                               makes a list inline.
 * delimited-list($separator)                makes an inline list delimited with the passed string. Defaults to making a comma-separated list.
 *
 *
 *** Text
 * ------
 * ellipsis($no-wrap)
 * force-wrap                            Prevent long urls and text from breaking layouts.
 * nowrap                                When remembering whether or not there's a hyphen in white-space is too hard
 *
 * replace-text($img, $x, $y)                            Hides html text and replaces it with an image.
 * replace-text-with-dimensions($img, $x, $y, $inline)   Also sets the width and height of the element accordingly.
 * hide-text($direction)                                 Hides text in an element so you can see the background.
 * squish-text                                           Hides text in an element by squishing the text into oblivion.
 *
 *** Units
 * -------
 * rem($property, $values, $use-px-fallback: $rem-with-px-fallback)  Output a given style rule containing rem values along with an (optional)
 *                                                                   fallback rule for older browsers (with rem values converted to px).
 */

/**
 * 0.3 COMPASS UTILITY MIXINS
 */


/**
 * 1 CSS-TRICKS MIXINS
 *
 * A selection of mixins published in CSS-Tricks website
 *
 * @link http://css-tricks.com/snippets/sass/
 */

/**
 * 1.1 COVERING MIXIN
 *
 * Usage:
 *     .overlay {
 *         @include coverer;
 *     }
 *
 * @link http://css-tricks.com/snippets/sass/covering-mixin/
 */
@mixin coverer {
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
}

/**
 * 1.2 CENTERING MIXIN
 *
 * Usage:
 *    .parent {
 *        position: relative;
 *    }
 *    .child {
 *        @include centerer;
 *    }
 *
 * @link http://css-tricks.com/snippets/sass/centering-mixin/
 */
@mixin centerer {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}

/**
 * 1.3 STRIPED GRADIENT MIXIN
 *
 * Usage:
 *     body {
 *         @include stripes(to right, #8e44ad #2c3e50 #2980b9 #16a085 #27ae60);
 *     }
 *
 * @link http://css-tricks.com/snippets/sass/striped-gradient-mixin/
 */
@mixin stripes($direction, $colors) {
	$length: length($colors);
	
	@if $length > 1 {
		$stripes: ();
		
		@for $i from 1 through $length {
			$stripe: (100% / $length) * ($i - 1);
			
			@if $i > 1 {
				$stripes: append($stripes, nth($colors, $i - 1) $stripe, comma);
			}
			
			$stripes: append($stripes, nth($colors, $i) $stripe, comma);
		}
		
		background-image: linear-gradient($direction, $stripes);
	} @else if $length == 1 {
		background-color: $colors;
	}
}


/**
 * 2 OTHER USEFUL MIXINS
 *
 */

/**
 * 2.1 CSS3 GRADIENTS
 *
 * Be careful with these since they can
 * really slow down your CSS. Don't overdo it.
 *
 * USAGE: @include css-gradient( #dfdfdf, #f8f8f8 );
 */
@mixin css-gradient($from: #dfdfdf, $to: #f8f8f8) {
	background-color: $to;
	background-image: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
	background-image: -webkit-linear-gradient(top, $from, $to);
	background-image: -moz-linear-gradient(top, $from, $to);
	background-image: -o-linear-gradient(top, $from, $to);
	background-image: linear-gradient(to bottom, $from, $to);
}

/**
 * 2.2 INPUT PLACEHOLDER
 *
 * Style placeholder text in inputs
 *
 * @link http://css-tricks.com/snippets/css/style-placeholder-text/
 */
@mixin input-placeholder($color: #000, $opacity: auto, $ttime: auto, $ttype: ease) {
	&::-webkit-input-placeholder {
		color: $color;
		@if $opacity != 'auto' {
			opacity: $opacity;
		}
		@if $ttime!= 'auto' {
			transition: opacity $ttime $ttime $ttype;
		}
	}
	&::-moz-placeholder {  // Firefox 19+
		color: $color;
		@if $opacity != 'auto' {
			opacity: $opacity;
		}
		@if $ttime != 'auto' {
			transition: opacity $ttime $ttime $ttype;
		}
		opacity: $opacity;
	}
	&:-ms-input-placeholder {
		color: $color;
		@if $opacity != 'auto' {
			opacity: $opacity;
		}
		@if $ttime != 'auto' {
			transition: opacity $ttime $ttime $ttype;
		}
	}
}


/**
 * 2.3 INTRINSIC RATIO
 *
 * @link https://github.com/aebsr/intrinsic-ratio-generator
 */
@mixin ir($ratio, $width: 100) {
	width: $width * 1%;
	height: 0;
	padding-bottom: ($width / $ratio) * 1%;
}

