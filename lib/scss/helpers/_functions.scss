/**
 * Stylesheet: Sass Functions
 * ************************************************************
 *
 * You can do a lot of really cool things in Sass. Functions help you
 * make repeated actions a lot easier. They are really similar to mixins,
 * but can be used for so much more.
 *
 *		1 Color
 *		2 Layout
 *		3 Lists
 *
 *		4 Numbers, units, relationships
 *
 * @see:docs http://sass-lang.com/documentation/Sass/Script/Functions.html
 */


/**
 * 1 COLOR FUNCTIONS
 *
 * These are helpful when you're working with shadows and such things.
 * It's essentially a quicker way to write RGBA.
 */

// black
@function black($opacity) {
    @return rgba(0,0,0,$opacity);
}
// white
@function white($opacity) {
    @return rgba(255,255,255,$opacity);
}


/**
 * 2 LAYOUT FUNCTIONS
 *
 */

// To use in conjuntion with /layout/_zindex.scss
@function z($list, $element) {
   $z-index: index($list, $element);
   @if $z-index {
      @return $z-index;
   }
   @warn 'There is no item "#{$element}" in this list; choose one of: #{$list}';
   @return null;
}


/**
 * 3 LIST FUNCTIONS
 *
 */

// http://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/
// probably is better just to use sassy-list



/**
 * 4 NUMBERS, UNITS AND RELATIONSHIPS
 *
 */

/*
 * Strips the unit of measure and returns it
 * @see:source https://github.com/zurb/foundation/blob/master/scss/foundation/_functions.scss#L40
 */
@function strip-unit( $num ) {
	@return $num / ($num * 0 + 1);
 }

/**
 * Convert rem to pixels
 *
 * @see:source http://davidwalsh.name/rem-px-browser-function-sass
 */
@function rem2px( $values ) {

	$list: ();

	@each $value in $values {

		$unit : unit( $value );
		$val  : strip-unit( $value );

		@if ( $rem-with-px-fallbacks ) and ( $unit == 'rem' ) {
			$list: append( $list, ( $val * $base-font-size ) );
		}
		@else if( $unit == 'px' ) or ( $unit == 'rem' ){
			$list: append( $list, $value );
		}
		@else {
			@warn 'There is no unit conversion for #{$unit}';
		}
	}

@return $list();
}

/**
 * Restrict a number between min and max values
 */
@function clamp($value, $min, $max) {
	@return if($value > $max, $max, if($value < $min, $min, $value));
}

/**
 * Calculate target / context
 *
 * Example:
 *		width: calc-percent(650px, 1000px);
 * Compiles to:
 *		width: 65%;
 */
@function calc-percent($target, $container) {
	  @return ($target / $container) * 100%;
  }

/**
 * Get a number without its unit
 */
@function strip-unit($value) {
	@return $value / ($value * 0 + 1);
}

/**
 * Converts angles into another unit.
 * You could probably do this for anything fixed (px, in, cm, mm)
 */
@function convert-angle($value, $unit) {
	$convertable-units: deg grad turn rad;
	$conversion-factors: 1 10grad/9deg 1turn/360deg 3.1415926rad/180deg;
	@if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
		@return $value
			/ nth($conversion-factors, index($convertable-units, unit($value)))
			* nth($conversion-factors, index($convertable-units, $unit));
	} @else {
		@warn "Cannot convert #{unit($value)} to #{$unit}";
	}
}


