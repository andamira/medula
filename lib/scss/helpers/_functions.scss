/*
 * Stylesheet: Sass Functions
 *
 * You can do a lot of really cool things in Sass. Functions help you
 * make repeated actions a lot easier. They are really similar to mixins,
 * but can be used for so much more.
 *
 * INDEX:
 * 
 *		Color
 *		Layout
 *		Lists
 *
 *		Numbers, units, relationships
 *
 * Documentation
 * http://sass-lang.com/documentation/Sass/Script/Functions.html
 */


/*
 * COLOR FUNCTIONS
 * ************************************************************
 *
 * These are helpful when you're working with shadows and such things.
 * It's essentially a quicker way to write RGBA.
 */

// black
@function black($opacity) {
    @return rgba(0,0,0,$opacity);
}
// white
@function white($opacity) {
    @return rgba(255,255,255,$opacity);
}



/*
 * LAYOUT FUNCTIONS
 * ************************************************************
 */

// To use in conjuntion with /layout/_zindex.scss
@function z($list, $element) {
   $z-index: index($list, $element);
   @if $z-index {
      @return $z-index;
   }
   @warn 'There is no item "#{$element}" in this list; choose one of: #{$list}';
   @return null;
}


/*
 * LIST FUNCTIONS
 * ************************************************************
 */

// http://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/



/*
 * NUMBERS, UNITS AND RELATIONSHIPS
 * ************************************************************
 */

/*
 * Restrict a number between min and max values
 */
@function clamp($value, $min, $max) {
	@return if($value > $max, $max, if($value < $min, $min, $value));
}

/* 
 * Calculate target / context
 *
 * Example:
 *		width: calc-percent(650px, 1000px);
 * Compiles to:
 *		width: 65%;
 */
@function calc-percent($target, $container) {
	  @return ($target / $container) * 100%;
  }

/*
 * Get a number without its unit
 */
@function strip-unit($value) {
	@return $value / ($value * 0 + 1);
}

/* 
 * Converts angles into another unit.
 * You could probably do this for anything fixed (px, in, cm, mm)
 */
@function convert-angle($value, $unit) {
	$convertable-units: deg grad turn rad;
	$conversion-factors: 1 10grad/9deg 1turn/360deg 3.1415926rad/180deg;
	@if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
		@return $value
			/ nth($conversion-factors, index($convertable-units, unit($value)))
			* nth($conversion-factors, index($convertable-units, $unit));
	} @else {
		@warn "Cannot convert #{unit($value)} to #{$unit}";
	}
}


