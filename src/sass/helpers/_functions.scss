/**
 * Stylesheet: Sass Functions
 * ************************************************************
 *
 * You can do a lot of really cool things in Sass. Functions help you
 * make repeated actions a lot easier. They are really similar to mixins,
 * but instead of outputting lines of Sass, functions return a value.
 *
 *     1 Assets Functions
 *
 *     2 CSS-Tricks Functions
 *
 *         2.1 Black and White Opacity Functions
 *
 *     3 Layout
 *
 *         3.1 (z-index)
 *
 *     4 Numbers & Units
 *
 *         4.1 strip-unit()
 *         4.2 clamp()
 *         4.3 calc-percent()
 *         4.4 convert-angle()
 *
 *     5 Custom Functions
 *
 *
 * @link http://sass-lang.com/documentation/Sass/Script/Functions.html
 */


/**
 * 1 ASSETS FUNCTIONS
 *
 * Paths are defined in /src/sass/_global.scss
 */
@function image-url($url) {
	@return url("#{$image-url-path}#{$url}");
}

@function font-url($url) {
	@return url("#{$font-url-path}#{$url}");
}


/**
 * 2 CSS-TRICKS FUNCTIONS
 *
 * A selection of mixins published in CSS-Tricks website
 *
 * @link http://css-tricks.com/snippets/sass/
 */

/**
 * 2.1 BLACK AND WHITE OPACITIY FUNCTIONS
 *
 * It's pretty common to need a bit of transparent black or white.
 *
 * Usage:
 *      black(0.5);
 *
 * @link http://css-tricks.com/snippets/sass/black-white-opacity-mixins/
 */
@function black($opacity) {
    @return rgba(0,0,0,$opacity);
}
@function white($opacity) {
    @return rgba(255,255,255,$opacity);
}


/**
 * 3 LAYOUT FUNCTIONS
 *
 */

// To use in conjuntion with /layout/_zindex.scss
@function z($list, $element) {
   $z-index: index($list, $element);
   @if $z-index {
      @return $z-index;
   }
   @warn 'There is no item "#{$element}" in this list; choose one of: #{$list}';
   @return null;
}


/**
 * 4 NUMBERS & UNITS
 *
 */

/*
 * 4.1 Strips the unit of measure and returns it
 * @link https://github.com/zurb/foundation/blob/master/scss/foundation/_functions.scss#L40
 */
@function strip-unit( $num ) {
	@return $num / ($num * 0 + 1);
 }


/**
 * 4.2 Restrict a number between min and max values
 */
@function clamp($value, $min, $max) {
	@return if($value > $max, $max, if($value < $min, $min, $value));
}

/**
 * 4.3 Calculate target / context
 *
 * Example:
 *     width: calc-percent(650px, 1000px);
 *
 * Compiles to:
 *     width: 65%;
 */
@function calc-percent($target, $container) {
	@return ($target / $container) * 100%;
  }

/**
 * 4.4 Converts angles into another unit.
 * You could probably do this for anything fixed (px, in, cm, mm)
 */
@function convert-angle($value, $unit) {
	$convertable-units: deg grad turn rad;
	$conversion-factors: 1 10grad/9deg 1turn/360deg 3.1415926rad/180deg;
	@if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
		@return $value
			/ nth($conversion-factors, index($convertable-units, unit($value)))
			* nth($conversion-factors, index($convertable-units, $unit));
	} @else {
		@warn "Cannot convert #{unit($value)} to #{$unit}";
	}
}


/**
 * 5 CUSTOM FUNCTIONS
 */


